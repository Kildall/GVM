@page "/login"
@using GVM.Components.Misc
@using GVM.Services
@using GVM.Data.Request
@using GVM.Data.Response
@using System.ComponentModel.DataAnnotations
@using System.Text
@using GVM.Utils.Errors
@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar
@inject APIService API

<div class="d-flex justify-content-center align-items-center vh-100">
    <MudTabs Border="true" PanelClass="py-8">
        <MudTabPanel Text="Login">
            <EditForm Model="Ingreso" OnValidSubmit="HandleLogin">
                <div class="mb-3">
                    <MudTextField @bind-Value="Ingreso.Email" Label="Email" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.Email" />
                </div>
                <div class="mb-3">
                    <MudTextField @bind-Value="Ingreso.Clave" Label="Password" Variant="Variant.Outlined" InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="MostrarContraseña" AdornmentAriaLabel="Mostrar Contraseña" />
                </div>
                <div class="d-flex justify-content-center align-items-center m-3">
                    <MudButton ButtonType="ButtonType.Submit" Class="rounded-pill" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" EndIcon="@Icons.Material.Outlined.Login">Ingresar</MudButton>
                </div>
            </EditForm>
        </MudTabPanel>
        <MudTabPanel Text="Registrarse">
            <EditForm Model="Registro" OnValidSubmit="HandleRegister">
                
                <div class="mb-3">
                    <MudTextField @bind-Value="Registro.Nombre" Label="Nombre" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.Person" />
                </div>
                <div class="mb-3">
                    <MudTextField @bind-Value="Registro.Email" Label="Email" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.Email" />
                </div>
                <div class="mb-3">
                    <MudTextField @bind-Value="Registro.Clave" Label="Contraseña" Variant="Variant.Outlined" InputType="InputType.Password" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Outlined.Password" />
                </div>
                <div class="mb-3">
                    <MudTextField @bind-Value="Registro.ConfirmarClave" Label="Repetir Contraseña" Variant="Variant.Outlined" InputType="InputType.Password"/>
                </div>
                <div class="d-flex justify-content-center m-3">
                    <MudButton ButtonType="ButtonType.Submit" Class="rounded-pill" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" EndIcon="@Icons.Material.Outlined.ElectricBolt">Registrarse</MudButton>
                </div>
            </EditForm>
        </MudTabPanel>
    </MudTabs>
</div>

<MudDrawer @bind-Open="@_drawer" Width="100%" Height="fit-content" Anchor="Anchor.Bottom" Elevation="1" Variant="@DrawerVariant.Temporary">
    <div class="d-flex flex-column justify-content-center align-items-center h-100 m-5">
        <div class="row text-center">
            <MudImage Src="svg/pending_register.svg" Height="300"/>
        </div>
        <div class="row text-center mt-3">
            <div class="col-sm-12 col-md">
                <MudText Typo="Typo.h4" Class="fw-bolder">Registro Pendiente</MudText>
                <MudText Typo="Typo.h6" Class="text-black-50">
                    Aun no tienes cuenta con nuestro sistema, comunicate a ventas@gvm.com.ar para obtener la tuya!
                </MudText>
            </div>
        </div>
    </div>
</MudDrawer>

@code {
    [CascadingParameter]
    public LoadingIndicator LoadingIndicator { get; set; }

    LoginData Ingreso { get; set; } = new ();
    RegisterData Registro { get; set; } = new ();

    List<Snackbar> _snackbarErrors = new();

    bool _drawer;

    bool _isShow;
    InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Icons.Material.Filled.Visibility;

    void MostrarContraseña()
    {
        @if (_isShow)
        {
            _isShow = false;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Password;
        }
        else
        {
            _isShow = true;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Text;
        }
    }

    private async void HandleLogin()
    {
        bool result = false;
        try
        {
            Snackbar.Clear();
            ValidationContext context = new ValidationContext(Ingreso);
            List<ValidationResult> results = new List<ValidationResult>();
            bool isValid = Validator.TryValidateObject(Ingreso, context, results, validateAllProperties: true);
            if (isValid)
            {
                await LoadingIndicator.Show();
                result = await API.LoginAsync(Ingreso.Email, Ingreso.Clave);
                if(!result)
                {
                    Snackbar.Add("Usuario o contraseña incorrectos", Severity.Error);
                }
            }
            else
            {
                ShowErrors(results.Select(r => r.ErrorMessage));
                return;
            }
        }
        catch (AuthenticationException e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
        catch (Exception e)
        {
            Snackbar.Add("Un error desconocido ha ocurrido", Severity.Error);
        }
        finally
        {
            await LoadingIndicator.Hide();
        }
    }

    private async Task HandleRegister()
    {
        bool result = false;
        try
        {
            Snackbar.Clear();
            ValidationContext context = new ValidationContext(Registro);
            List<ValidationResult> results = new List<ValidationResult>();
            bool isValid = Validator.TryValidateObject(Registro, context, results, validateAllProperties: true);
            if (isValid)
            {
                await LoadingIndicator.Show(false);
                var response = await API.PostAsync<SignupResponse>("/api/auth/signup", new SignupRequest(Registro.Email, Registro.Clave, Registro.Nombre));
                result = response.status.success;
            }
            else
            {
                ShowErrors(results.Select(r => r.ErrorMessage));
                return;
            }
        }
        catch (AuthenticationException e)
        {
            Snackbar.Add(e.Message, Severity.Error);
        }
        catch (Exception e)
        {
            Snackbar.Add("Un error desconocido ha ocurrido", Severity.Error);
        }
        finally
        {
            await LoadingIndicator.Hide();
        }

        if (result)
        {
            Registro = new RegisterData();
            _drawer = true;
        }
        else
        {
            Snackbar.Add("No se pudo completar el registro", Severity.Warning);
        }
    }

    private void ShowErrors(IEnumerable<string> errors)
    {
        foreach (var error in errors)
        {
            var snackback = Snackbar.Add(error, Severity.Error, options =>
            {
                options.Icon = Icons.Material.Outlined.Error;
                options.CloseAfterNavigation = true;
            });
            _snackbarErrors.Add(snackback);
        }
    }

    public class LoginData
    {
        [Required(ErrorMessage = "El email es requerido")]
        public string Email { get; set; }

        [Required(ErrorMessage = "La contraseña es requerida")]
        public string Clave { get; set; }
    }

    public class RegisterData
    {
        [Required(ErrorMessage = "El nombre es requerido")]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "El nombre tiene que tener entre 3 y 50 caracteres")]
        public string Nombre { get; set; }

        [Required(ErrorMessage = "El email es requerido")]
        [EmailAddress(ErrorMessage = "El email no es valido.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "La contraseña es requerida")]
        [StringLength(64, MinimumLength = 8, ErrorMessage = "La contraseña tiene que tener entre 8 y 64 caracteres")]
        public string Clave { get; set; }

        public string ConfirmarClave { get; set; }
    }
}
