@* @page "/ventas/crear"
@using GVM.Data.ViewModels
@using GVM.Components
@using GVM.Data.Entidades
@using Microsoft.EntityFrameworkCore
@inherits AuthorizedComponentPage
    <div class="container-sm container-md text-center my-5">
        <div class="row mb-2">
                <div class="col">
                    <MudAutocomplete Class="border rounded p-2" T="ClienteViewModel" ToStringFunc="@(e => e?.Nombre)"
                                     @bind-Value="@Venta.Cliente" Label="Cliente" SearchFunc="@SearchCliente" ResetValueOnEmptyText="true"
                                     CoerceText="true" CoerceValue="true">
                        <BeforeItemsTemplate>
                            <MudIconButton Icon="@Icons.Material.Outlined.SettingsBackupRestore" Color="Color.Primary" @onclick="() => { Venta.Cliente = null; }" Class="my-1">Restore</MudIconButton>
                        </BeforeItemsTemplate>
                    </MudAutocomplete>
                </div>
            </div>
            @if (Venta.Cliente == null)
            {
                <div class="row mb-2">
                    <div class="col">
                        <MudTextField Class="border rounded p-2" T="string" Label="Calle" Placeholder=@Direccion.Calle1/>
                    </div>
                </div>
                <div class="row mb-2">
                    <div class="col">
                        <MudTextField Class="border rounded p-2" T="string" Label="Piso/Departamento/Puerta" Placeholder=@Direccion.Calle2/>
                    </div>
                </div>
                <div class="row mb-2">
                    <div class="col">
                        <MudTextField Class="border rounded p-2" T="string" Label="Codigo Postal" Placeholder=@Direccion.CodigoPostal/>
                    </div>
                </div>
                <div class="row mb-2">
                    <div class="col">
                        <MudTextField Class="border rounded p-2" T="string" Label="Localidad / Barrio" Placeholder=@Direccion.Localidad/>
                    </div>
                </div>
                <div class="row mb-2">
                    <div class="col">
                        <MudAutocomplete Class="border rounded p-2" T="string" @bind-Value="@Direccion.Provincia" Label="Provincia" SearchFunc="@SearchProvincia"
                                         ResetValueOnEmptyText="true"
                                         CoerceText="true" CoerceValue="true"/>
                    </div>
                </div>
                <div class="row mb-2">
                    <div class="col">
                        <MudTextField Class="border rounded p-2" T="string" Label="Detalle" Placeholder=@Direccion.Detalle/>
                    </div>
                </div>
            }
            @*                <div class="row mb-2">
                    <MudAutocomplete Class="border rounded p-2" T="string" @bind-Value="@Envio.Tipo" Label="Tipo de Envio" SearchFunc="@SearchTipoEnvio"
                                     ResetValueOnEmptyText="true"
                                     CoerceText="true" CoerceValue="true" />
                </div>
                <div class="row mb-2">
                    <div class="col-6">
                        <MudTextField Class="border rounded p-2" T="string" Label="Notas de la venta" Placeholder=@Venta.Descripcion />
                    </div>
                </div>
            <MudButton Class="float-end" Variant="Variant.Filled" Color="Color.Primary">
                Modificar Datos
            </MudButton>
    </div>

@code {
     List<ClienteViewModel> Clientes = new();
     VentaViewModel Venta = new();
     DireccionViewModel Direccion = new();
     EnvioViewModel Envio = new();

     protected override async Task OnInitializedAsync()
     {
         List<Cliente> clientes = await GVMContext.Clientes.ToListAsync();
         Clientes = Mapper.Map<List<Cliente>, List<ClienteViewModel>>(clientes);
         Clientes = Clientes.OrderBy(c => c.Nombre).ToList();
     }

     private async Task<IEnumerable<ClienteViewModel>> SearchCliente(string arg)
     {
         await Task.Delay(1);
         if (string.IsNullOrEmpty(arg))
             return Clientes;
         return Clientes.Where(x => x.Nombre.Contains(arg, StringComparison.InvariantCultureIgnoreCase));
     }

     private async Task<IEnumerable<string>> SearchProvincia(string arg)
     {
         await Task.Delay(1);
         if (string.IsNullOrEmpty(arg))
             return provincias;
         return provincias.Where(x => x.Contains(arg, StringComparison.InvariantCultureIgnoreCase));
     }


     string[] provincias = {
         "Buenos Aires",
         "Catamarca",
         "Chaco",
         "Chubut",
         "Córdoba",
         "Corrientes",
         "Entre Ríos",
         "Formosa",
         "Jujuy",
         "La Pampa",
         "La Rioja",
         "Mendoza",
         "Misiones",
         "Neuquén",
         "Río Negro",
         "Salta",
         "San Juan",
         "San Luis",
         "Santa Cruz",
         "Santa Fe",
         "Santiago del Estero",
         "Tierra del Fuego",
         "Tucumán"
     };
}
 *@